# UNFAIR DICE TEMPLATE: REPLACE THIS LINE WITH YOUR FILE HEADER

import random
import math






def biased_rolls(prob_list, s, n): 
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results. 

    Arguments:
        prob_list: a list of the probabilities of rolling the 
                   number on each side of the m-sided die. The list  
                   will always have the length m (m >= 2), where m is 
                   the number of sides numbered 1 to m. Therefore,  
                   for example, the probability stored at index 0 in 
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the 
               biased die, in the order they were generated.
    """
    # Initiallization of random.seed()
    random.seed(s)

    # main loop which loops over n rolls
    rolls = []
    for i in range(n):
        rand_float = random.random()
        
        # makes a cumulative sum, then stores vaues in `boundaries`.
        sum_prob = 0
        boundaries = [0]
        for j in range(len(prob_list)):
            sum_prob += prob_list[j]
            boundaries.append(sum_prob)


        # loops through `boundaries` from second element to last, checking
	# if the random float falls within the current bound and the previous bound
        for k in range(1, len(boundaries)):
            if rand_float < boundaries[k] and rand_float > boundaries[k - 1]:
                rolls.append(k)
                continue

    # return the resulting rolls
    return rolls

def draw_histogram(m, rolls, width=20):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments: 
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the 
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """


    occurances = []
    for i in range(1, m + 1):
        indexes_of_num = argfind(rolls, i)
        occurances.append(len(indexes_of_num))
        
    
    occurances = max_norm(occurances)
    str_hist = ""
    for i in range(len(occurances)):
        occurances[i] *= width
        str_hist += str(i + 1) + ". "
        for j in range(width):
            if j <= occurances[i]:
                str_hist += "#"
            else:
                str_hist += "-"
        str_hist += "\n"
    print("Frequency Histogram: " + str(m) +  "-sided Die")
    print(str_hist)


def argfind(data_list, value):
    return [i for i, j in enumerate(data_list) if j == value]


def softmax(values):
    
    sum_values = 0
    for i in values:
        sum_values += i
    
    for i in range(len(values)):
        values[i] /= sum_values
    return values
    
def max_norm(values):

    max_value = max(values)
    for i in range(len(values)):
        values[i] /= max_value
    return values    



if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations.
